<?php

namespace Stl30\LaravelMobilpay\Http\Controllers;
use http\Env\Request;
use Stl30\LaravelMobilpay\Mobilpay\Payment\Request\Mobilpay_Payment_Request_Abstract;
use Stl30\LaravelMobilpay\Mobilpay\Payment\Request\Mobilpay_Payment_Request_Card;
use Stl30\LaravelMobilpay\Mobilpay\Payment\Invoice;
use Stl30\LaravelMobilpay\Mobilpay\Payment\Mobilpay_Payment_Address;
use Stl30\LaravelMobilpay\Mobilpay\Payment\Request\Mobilpay_Payment_Request_Notify;

class LaravelMobilpayController extends Controller
{
    public function card()
    {
        //
        return view('vendor.laravel-mobilpay.card');
    }

    public function cardRedirect(Request $request)
    {
        #for testing purposes, all payment requests will be sent to the sandbox server. Once your account will be active you must switch back to the live server https://secure.mobilpay.ro
        #in order to display the payment form in a different language, simply add the language identifier to the end of the paymentUrl, i.e https://secure.mobilpay.ro/en for English
        $paymentUrl = 'http://sandboxsecure.mobilpay.ro';
        //$paymentUrl = 'https://secure.mobilpay.ro';
        // this is the path on your server to the public certificate. You may download this from Admin -> Conturi de comerciant -> Detalii -> Setari securitate
//        $x509FilePath 	= 'i.e: /home/certificates/public.cer';
        $x509FilePath 	= config('laravel-mobilpay.sandbox_public_key');
        try
        {
            srand((double) microtime() * 1000000);
            $objPmReqCard 						= new Mobilpay_Payment_Request_Card();
            #merchant account signature - generated by mobilpay.ro for every merchant account
            #semnatura contului de comerciant - mergi pe www.mobilpay.ro Admin -> Conturi de comerciant -> Detalii -> Setari securitate
            $objPmReqCard->signature 			= 'XXXX-XXXX-XXXX-XXXX-XXXX';
            #you should assign here the transaction ID registered by your application for this commercial operation
            #order_id should be unique for a merchant account
            $objPmReqCard->orderId 				= md5(uniqid(rand()));
            #below is where mobilPay will send the payment result. This URL will always be called first; mandatory
            $objPmReqCard->confirmUrl 			= 'http://your.confirm.url';
            #below is where mobilPay redirects the client once the payment process is finished. Not to be mistaken for a "successURL" nor "cancelURL"; mandatory
            $objPmReqCard->returnUrl 			= 'http://your.return.url';

            #detalii cu privire la plata: moneda, suma, descrierea
            #payment details: currency, amount, description
            $objPmReqCard->invoice = new Mobilpay_Payment_Invoice();
            #payment currency in ISO Code format; permitted values are RON, EUR, USD, MDL; please note that unless you have mobilPay permission to
            #process a currency different from RON, a currency exchange will occur from your currency to RON, using the official BNR exchange rate from that moment
            #and the customer will be presented with the payment amount in a dual currency in the payment page, i.e N.NN RON (e.ee EUR)
            $objPmReqCard->invoice->currency	= 'RON';
            $objPmReqCard->invoice->amount		= '1.00';
            #available installments number; if this parameter is present, only its value(s) will be available
            //$objPmReqCard->invoice->installments= '2,3';
            #selected installments number; its value should be within the available installments defined above
            //$objPmReqCard->invoice->selectedInstallments= '3';
            //platile ulterioare vor contine in request si informatiile despre token. Prima plata nu va contine linia de mai jos.
            $objPmReqCard->invoice->tokenId = 'token_id';
            $objPmReqCard->invoice->details		= 'Plata online cu cardul';

            #detalii cu privire la adresa posesorului cardului
            #details on the cardholder address (optional)
            $billingAddress 				= new Mobilpay_Payment_Address();
            $billingAddress->type			= $_POST['billing_type']; //should be "person"
            $billingAddress->firstName		= $_POST['billing_first_name'];
            $billingAddress->lastName		= $_POST['billing_last_name'];
            $billingAddress->address		= $_POST['billing_address'];
            $billingAddress->email			= $_POST['billing_email'];
            $billingAddress->mobilePhone		= $_POST['billing_mobile_phone'];
            $objPmReqCard->invoice->setBillingAddress($billingAddress);

            #detalii cu privire la adresa de livrare
            #details on the shipping address
            $shippingAddress 				= new Mobilpay_Payment_Address();
            $shippingAddress->type			= $_POST['shipping_type'];
            $shippingAddress->firstName		= $_POST['shipping_first_name'];
            $shippingAddress->lastName		= $_POST['shipping_last_name'];
            $shippingAddress->address		= $_POST['shipping_address'];
            $shippingAddress->email			= $_POST['shipping_email'];
            $shippingAddress->mobilePhone		= $_POST['shipping_mobile_phone'];
            $objPmReqCard->invoice->setShippingAddress($shippingAddress);

            #uncomment the line below in order to see the content of the request
            // TODO for debug
            dd(__METHOD__,$objPmReqCard);
            //echo "<pre>";print_r($objPmReqCard);echo "</pre>";
            $objPmReqCard->encrypt($x509FilePath);
        }
        catch(Exception $exception)
        {
        }
        //
        return view('vendor.laravel-mobilpay.cardRedirect')->with([
            'objPmReqCard' => $objPmReqCard,
            'e' => $exception

        ]);
        die(__METHOD__.'show');
    }

    public function cardConfirm()
    {

        $errorCode 		= 0;
        $errorType		= Mobilpay_Payment_Request_Abstract::CONFIRM_ERROR_TYPE_NONE;
        $errorMessage	= '';

        if (strcasecmp($_SERVER['REQUEST_METHOD'], 'post') == 0)
        {
            if(isset($_POST['env_key']) && isset($_POST['data']))
            {
                #calea catre cheia privata
                #cheia privata este generata de mobilpay, accesibil in Admin -> Conturi de comerciant -> Detalii -> Setari securitate
                $privateKeyFilePath = 'i.e: /home/certificates/private.key';

                try
                {
                    $objPmReq = Mobilpay_Payment_Request_Abstract::factoryFromEncrypted($_POST['env_key'], $_POST['data'], $privateKeyFilePath);
                    #uncomment the line below in order to see the content of the request
                    //print_r($objPmReq);
                    $rrn = $objPmReq->objPmNotify->rrn;
                    // action = status only if the associated error code is zero
                    if ($objPmReq->objPmNotify->errorCode == 0) {
                        switch($objPmReq->objPmNotify->action)
                        {
                            #orice action este insotit de un cod de eroare si de un mesaj de eroare. Acestea pot fi citite folosind $cod_eroare = $objPmReq->objPmNotify->errorCode; respectiv $mesaj_eroare = $objPmReq->objPmNotify->errorMessage;
                            #pentru a identifica ID-ul comenzii pentru care primim rezultatul platii folosim $id_comanda = $objPmReq->orderId;
                            case 'confirmed':
                                #cand action este confirmed avem certitudinea ca banii au plecat din contul posesorului de card si facem update al starii comenzii si livrarea produsului
                                //update DB, SET status = "confirmed/captured"
                                $errorMessage = $objPmReq->objPmNotify->errorMessage;
                                break;
                            case 'confirmed_pending':
                                #cand action este confirmed_pending inseamna ca tranzactia este in curs de verificare antifrauda. Nu facem livrare/expediere. In urma trecerii de aceasta verificare se va primi o noua notificare pentru o actiune de confirmare sau anulare.
                                //update DB, SET status = "pending"
                                $errorMessage = $objPmReq->objPmNotify->errorMessage;
                                break;
                            case 'paid_pending':
                                #cand action este paid_pending inseamna ca tranzactia este in curs de verificare. Nu facem livrare/expediere. In urma trecerii de aceasta verificare se va primi o noua notificare pentru o actiune de confirmare sau anulare.
                                //update DB, SET status = "pending"
                                $errorMessage = $objPmReq->objPmNotify->errorMessage;
                                break;
                            case 'paid':
                                #cand action este paid inseamna ca tranzactia este in curs de procesare. Nu facem livrare/expediere. In urma trecerii de aceasta procesare se va primi o noua notificare pentru o actiune de confirmare sau anulare.
                                //update DB, SET status = "open/preauthorized"
                                $errorMessage = $objPmReq->objPmNotify->errorMessage;
                                break;
                            case 'canceled':
                                #cand action este canceled inseamna ca tranzactia este anulata. Nu facem livrare/expediere.
                                //update DB, SET status = "canceled"
                                $errorMessage = $objPmReq->objPmNotify->errorMessage;
                                break;
                            case 'credit':
                                #cand action este credit inseamna ca banii sunt returnati posesorului de card. Daca s-a facut deja livrare, aceasta trebuie oprita sau facut un reverse.
                                //update DB, SET status = "refunded"
                                $errorMessage = $objPmReq->objPmNotify->errorMessage;
                                break;
                            default:
                                $errorType		= Mobilpay_Payment_Request_Abstract::CONFIRM_ERROR_TYPE_PERMANENT;
                                $errorCode 		= Mobilpay_Payment_Request_Abstract::ERROR_CONFIRM_INVALID_ACTION;
                                $errorMessage 	= 'mobilpay_refference_action paramaters is invalid';
                                break;
                        }
                    }
                    else {
                        //update DB, SET status = "rejected"
                        $errorMessage = $objPmReq->objPmNotify->errorMessage;
                    }
                }
                catch(Exception $e)
                {
                    $errorType 		= Mobilpay_Payment_Request_Abstract::CONFIRM_ERROR_TYPE_TEMPORARY;
                    $errorCode		= $e->getCode();
                    $errorMessage 	= $e->getMessage();
                }
            }
            else
            {
                $errorType 		= Mobilpay_Payment_Request_Abstract::CONFIRM_ERROR_TYPE_PERMANENT;
                $errorCode		= Mobilpay_Payment_Request_Abstract::ERROR_CONFIRM_INVALID_POST_PARAMETERS;
                $errorMessage 	= 'mobilpay.ro posted invalid parameters';
            }
        }
        else
        {
            $errorType 		= Mobilpay_Payment_Request_Abstract::CONFIRM_ERROR_TYPE_PERMANENT;
            $errorCode		= Mobilpay_Payment_Request_Abstract::ERROR_CONFIRM_INVALID_POST_METHOD;
            $errorMessage 	= 'invalid request metod for payment confirmation';
        }

        return view('vendor.laravel-mobilpay.cardConfirm')->with([
            'errorCode' => $errorCode,
            'errorType' => $errorType,
            'errorMessage' => $errorMessage
        ]);
    }

    public function cardReturn()
    {
        return view('vendor.laravel-mobilpay.cardReturn');
        die(__METHOD__.'store');
    }
}
